/*
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Obada.Client.Client.OpenAPIDateConverter;

namespace Obada.Client.Model
{
    /// <summary>
    /// OBADA record.
    /// </summary>
    [DataContract]
    public partial class Obit :  IEquatable<Obit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Obit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Obit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Obit" /> class.
        /// </summary>
        /// <param name="obitDid">OBADA decentralized identifier.</param>
        /// <param name="usn">Test An 8-12 character “URL Shortened” obit. Create the USN by Base(58) encoding the OBIT ID. Take the first 8 characters. Check for duplicates. With 16 million OBITs there is a 40% chance of collision. If so, add 4 characters. Repeat as necessary until a unique USN is generated. .</param>
        /// <param name="obitAlternateIds">Client generated things. First hash + last hash.</param>
        /// <param name="ownerDid">Owner is the person/entity that owns the obit and the physical asset it represents. Format is a DID like did:obada:owner:1234. However in the current version only test numbers will be used. (required).</param>
        /// <param name="obdDid">Future use. The OBD DID is formatted like did:obada:obd:1234, which represents a utility token tracking orders and proofs..</param>
        /// <param name="obitStatus">Represent available Obit statuses:   - FUNCTIONAL   - NON_FUNCTIONAL   - DISPOSED   - STOLEN   - DISABLED_BY_OWNER .</param>
        /// <param name="manufacturer">Waiting more specific details from Rohi (required).</param>
        /// <param name="partNumber">Manufacturer provided. In cases where no part number is provided for the product, use model, or the most specific ID available from the manufacturer. MWCN2LL/A (an iPhone 11 Pro, Silver, 256GB, model A2160) (required).</param>
        /// <param name="serialNumberHash">Serial number hashed with sha256 hash function (required).</param>
        /// <param name="metadata">Get description from Rohi.</param>
        /// <param name="docLinks">To generate this link, take an SHA-256 hash of the document, and link to it as https://www.some-website.com?h1&#x3D;hash-of-document. Note this does not yet adhere to the hashlink standard. .</param>
        /// <param name="structuredData">Same as metadata but bigger. Key (string) &#x3D;&gt; Value (string) (hash per line sha256(key + value)).</param>
        /// <param name="modifiedOn">UNIX timestamp.</param>
        /// <param name="rootHash">Hash calculated by SHA256 (previous Obit root hash + Obit data). TODO: Discuss root hash with Rohi. .</param>
        public Obit(string obitDid = default(string), string usn = default(string), List<string> obitAlternateIds = default(List<string>), string ownerDid = default(string), string obdDid = default(string), string obitStatus = default(string), string manufacturer = default(string), string partNumber = default(string), string serialNumberHash = default(string), List<MetaDataRecord> metadata = default(List<MetaDataRecord>), List<DocumentLink> docLinks = default(List<DocumentLink>), List<StructureDataRecord> structuredData = default(List<StructureDataRecord>), long modifiedOn = default(long), string rootHash = default(string))
        {
            // to ensure "ownerDid" is required (not null)
            if (ownerDid == null)
            {
                throw new InvalidDataException("ownerDid is a required property for Obit and cannot be null");
            }
            else
            {
                this.OwnerDid = ownerDid;
            }

            // to ensure "manufacturer" is required (not null)
            if (manufacturer == null)
            {
                throw new InvalidDataException("manufacturer is a required property for Obit and cannot be null");
            }
            else
            {
                this.Manufacturer = manufacturer;
            }

            // to ensure "partNumber" is required (not null)
            if (partNumber == null)
            {
                throw new InvalidDataException("partNumber is a required property for Obit and cannot be null");
            }
            else
            {
                this.PartNumber = partNumber;
            }

            // to ensure "serialNumberHash" is required (not null)
            if (serialNumberHash == null)
            {
                throw new InvalidDataException("serialNumberHash is a required property for Obit and cannot be null");
            }
            else
            {
                this.SerialNumberHash = serialNumberHash;
            }

            this.ObitDid = obitDid;
            this.Usn = usn;
            this.ObitAlternateIds = obitAlternateIds;
            this.ObdDid = obdDid;
            this.ObitStatus = obitStatus;
            this.Metadata = metadata;
            this.DocLinks = docLinks;
            this.StructuredData = structuredData;
            this.ModifiedOn = modifiedOn;
            this.RootHash = rootHash;
        }

        /// <summary>
        /// OBADA decentralized identifier
        /// </summary>
        /// <value>OBADA decentralized identifier</value>
        [DataMember(Name="obit_did", EmitDefaultValue=false)]
        public string ObitDid { get; set; }

        /// <summary>
        /// Test An 8-12 character “URL Shortened” obit. Create the USN by Base(58) encoding the OBIT ID. Take the first 8 characters. Check for duplicates. With 16 million OBITs there is a 40% chance of collision. If so, add 4 characters. Repeat as necessary until a unique USN is generated. 
        /// </summary>
        /// <value>Test An 8-12 character “URL Shortened” obit. Create the USN by Base(58) encoding the OBIT ID. Take the first 8 characters. Check for duplicates. With 16 million OBITs there is a 40% chance of collision. If so, add 4 characters. Repeat as necessary until a unique USN is generated. </value>
        [DataMember(Name="usn", EmitDefaultValue=false)]
        public string Usn { get; set; }

        /// <summary>
        /// Client generated things. First hash + last hash
        /// </summary>
        /// <value>Client generated things. First hash + last hash</value>
        [DataMember(Name="obit_alternate_ids", EmitDefaultValue=false)]
        public List<string> ObitAlternateIds { get; set; }

        /// <summary>
        /// Owner is the person/entity that owns the obit and the physical asset it represents. Format is a DID like did:obada:owner:1234. However in the current version only test numbers will be used.
        /// </summary>
        /// <value>Owner is the person/entity that owns the obit and the physical asset it represents. Format is a DID like did:obada:owner:1234. However in the current version only test numbers will be used.</value>
        [DataMember(Name="owner_did", EmitDefaultValue=true)]
        public string OwnerDid { get; set; }

        /// <summary>
        /// Future use. The OBD DID is formatted like did:obada:obd:1234, which represents a utility token tracking orders and proofs.
        /// </summary>
        /// <value>Future use. The OBD DID is formatted like did:obada:obd:1234, which represents a utility token tracking orders and proofs.</value>
        [DataMember(Name="obd_did", EmitDefaultValue=false)]
        public string ObdDid { get; set; }

        /// <summary>
        /// Represent available Obit statuses:   - FUNCTIONAL   - NON_FUNCTIONAL   - DISPOSED   - STOLEN   - DISABLED_BY_OWNER 
        /// </summary>
        /// <value>Represent available Obit statuses:   - FUNCTIONAL   - NON_FUNCTIONAL   - DISPOSED   - STOLEN   - DISABLED_BY_OWNER </value>
        [DataMember(Name="obit_status", EmitDefaultValue=false)]
        public string ObitStatus { get; set; }

        /// <summary>
        /// Waiting more specific details from Rohi
        /// </summary>
        /// <value>Waiting more specific details from Rohi</value>
        [DataMember(Name="manufacturer", EmitDefaultValue=true)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Manufacturer provided. In cases where no part number is provided for the product, use model, or the most specific ID available from the manufacturer. MWCN2LL/A (an iPhone 11 Pro, Silver, 256GB, model A2160)
        /// </summary>
        /// <value>Manufacturer provided. In cases where no part number is provided for the product, use model, or the most specific ID available from the manufacturer. MWCN2LL/A (an iPhone 11 Pro, Silver, 256GB, model A2160)</value>
        [DataMember(Name="part_number", EmitDefaultValue=true)]
        public string PartNumber { get; set; }

        /// <summary>
        /// Serial number hashed with sha256 hash function
        /// </summary>
        /// <value>Serial number hashed with sha256 hash function</value>
        [DataMember(Name="serial_number_hash", EmitDefaultValue=true)]
        public string SerialNumberHash { get; set; }

        /// <summary>
        /// Get description from Rohi
        /// </summary>
        /// <value>Get description from Rohi</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public List<MetaDataRecord> Metadata { get; set; }

        /// <summary>
        /// To generate this link, take an SHA-256 hash of the document, and link to it as https://www.some-website.com?h1&#x3D;hash-of-document. Note this does not yet adhere to the hashlink standard. 
        /// </summary>
        /// <value>To generate this link, take an SHA-256 hash of the document, and link to it as https://www.some-website.com?h1&#x3D;hash-of-document. Note this does not yet adhere to the hashlink standard. </value>
        [DataMember(Name="doc_links", EmitDefaultValue=false)]
        public List<DocumentLink> DocLinks { get; set; }

        /// <summary>
        /// Same as metadata but bigger. Key (string) &#x3D;&gt; Value (string) (hash per line sha256(key + value))
        /// </summary>
        /// <value>Same as metadata but bigger. Key (string) &#x3D;&gt; Value (string) (hash per line sha256(key + value))</value>
        [DataMember(Name="structured_data", EmitDefaultValue=false)]
        public List<StructureDataRecord> StructuredData { get; set; }

        /// <summary>
        /// UNIX timestamp
        /// </summary>
        /// <value>UNIX timestamp</value>
        [DataMember(Name="modified_on", EmitDefaultValue=false)]
        public long ModifiedOn { get; set; }

        /// <summary>
        /// Hash calculated by SHA256 (previous Obit root hash + Obit data). TODO: Discuss root hash with Rohi. 
        /// </summary>
        /// <value>Hash calculated by SHA256 (previous Obit root hash + Obit data). TODO: Discuss root hash with Rohi. </value>
        [DataMember(Name="root_hash", EmitDefaultValue=false)]
        public string RootHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Obit {\n");
            sb.Append("  ObitDid: ").Append(ObitDid).Append("\n");
            sb.Append("  Usn: ").Append(Usn).Append("\n");
            sb.Append("  ObitAlternateIds: ").Append(ObitAlternateIds).Append("\n");
            sb.Append("  OwnerDid: ").Append(OwnerDid).Append("\n");
            sb.Append("  ObdDid: ").Append(ObdDid).Append("\n");
            sb.Append("  ObitStatus: ").Append(ObitStatus).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  SerialNumberHash: ").Append(SerialNumberHash).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  DocLinks: ").Append(DocLinks).Append("\n");
            sb.Append("  StructuredData: ").Append(StructuredData).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  RootHash: ").Append(RootHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Obit);
        }

        /// <summary>
        /// Returns true if Obit instances are equal
        /// </summary>
        /// <param name="input">Instance of Obit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Obit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ObitDid == input.ObitDid ||
                    (this.ObitDid != null &&
                    this.ObitDid.Equals(input.ObitDid))
                ) && 
                (
                    this.Usn == input.Usn ||
                    (this.Usn != null &&
                    this.Usn.Equals(input.Usn))
                ) && 
                (
                    this.ObitAlternateIds == input.ObitAlternateIds ||
                    this.ObitAlternateIds != null &&
                    input.ObitAlternateIds != null &&
                    this.ObitAlternateIds.SequenceEqual(input.ObitAlternateIds)
                ) && 
                (
                    this.OwnerDid == input.OwnerDid ||
                    (this.OwnerDid != null &&
                    this.OwnerDid.Equals(input.OwnerDid))
                ) && 
                (
                    this.ObdDid == input.ObdDid ||
                    (this.ObdDid != null &&
                    this.ObdDid.Equals(input.ObdDid))
                ) && 
                (
                    this.ObitStatus == input.ObitStatus ||
                    (this.ObitStatus != null &&
                    this.ObitStatus.Equals(input.ObitStatus))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.PartNumber == input.PartNumber ||
                    (this.PartNumber != null &&
                    this.PartNumber.Equals(input.PartNumber))
                ) && 
                (
                    this.SerialNumberHash == input.SerialNumberHash ||
                    (this.SerialNumberHash != null &&
                    this.SerialNumberHash.Equals(input.SerialNumberHash))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.DocLinks == input.DocLinks ||
                    this.DocLinks != null &&
                    input.DocLinks != null &&
                    this.DocLinks.SequenceEqual(input.DocLinks)
                ) && 
                (
                    this.StructuredData == input.StructuredData ||
                    this.StructuredData != null &&
                    input.StructuredData != null &&
                    this.StructuredData.SequenceEqual(input.StructuredData)
                ) && 
                (
                    this.ModifiedOn == input.ModifiedOn ||
                    (this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(input.ModifiedOn))
                ) && 
                (
                    this.RootHash == input.RootHash ||
                    (this.RootHash != null &&
                    this.RootHash.Equals(input.RootHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ObitDid != null)
                    hashCode = hashCode * 59 + this.ObitDid.GetHashCode();
                if (this.Usn != null)
                    hashCode = hashCode * 59 + this.Usn.GetHashCode();
                if (this.ObitAlternateIds != null)
                    hashCode = hashCode * 59 + this.ObitAlternateIds.GetHashCode();
                if (this.OwnerDid != null)
                    hashCode = hashCode * 59 + this.OwnerDid.GetHashCode();
                if (this.ObdDid != null)
                    hashCode = hashCode * 59 + this.ObdDid.GetHashCode();
                if (this.ObitStatus != null)
                    hashCode = hashCode * 59 + this.ObitStatus.GetHashCode();
                if (this.Manufacturer != null)
                    hashCode = hashCode * 59 + this.Manufacturer.GetHashCode();
                if (this.PartNumber != null)
                    hashCode = hashCode * 59 + this.PartNumber.GetHashCode();
                if (this.SerialNumberHash != null)
                    hashCode = hashCode * 59 + this.SerialNumberHash.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.DocLinks != null)
                    hashCode = hashCode * 59 + this.DocLinks.GetHashCode();
                if (this.StructuredData != null)
                    hashCode = hashCode * 59 + this.StructuredData.GetHashCode();
                if (this.ModifiedOn != null)
                    hashCode = hashCode * 59 + this.ModifiedOn.GetHashCode();
                if (this.RootHash != null)
                    hashCode = hashCode * 59 + this.RootHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
