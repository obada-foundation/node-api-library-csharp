/*
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Obada.Client.Client;
using Obada.Client.Model;

namespace Obada.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObitApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Generates Obit checksum
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <returns>Checksum</returns>
        Checksum Checksum (Obit obit = default(Obit));

        /// <summary>
        /// Generates Obit checksum
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <returns>ApiResponse of Checksum</returns>
        ApiResponse<Checksum> ChecksumWithHttpInfo (Obit obit = default(Obit));
        /// <summary>
        /// Generate Obit ID
        /// </summary>
        /// <remarks>
        /// Returns the Obit ID for a given device_id, part_number and serial_number input.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestObitId"> (optional)</param>
        /// <returns>ObitId</returns>
        ObitId GenerateId (RequestObitId requestObitId = default(RequestObitId));

        /// <summary>
        /// Generate Obit ID
        /// </summary>
        /// <remarks>
        /// Returns the Obit ID for a given device_id, part_number and serial_number input.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestObitId"> (optional)</param>
        /// <returns>ApiResponse of ObitId</returns>
        ApiResponse<ObitId> GenerateIdWithHttpInfo (RequestObitId requestObitId = default(RequestObitId));
        /// <summary>
        /// Get Obit by DID or USN
        /// </summary>
        /// <remarks>
        /// Get a single Obit by given ObitDID or USN
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <returns>Obit</returns>
        Obit Get (string obitDid);

        /// <summary>
        /// Get Obit by DID or USN
        /// </summary>
        /// <remarks>
        /// Get a single Obit by given ObitDID or USN
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <returns>ApiResponse of Obit</returns>
        ApiResponse<Obit> GetWithHttpInfo (string obitDid);
        /// <summary>
        /// Get Obit history by DID or USN
        /// </summary>
        /// <remarks>
        /// Shows the history of changes by given Obit with ObitDID or USN
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID or USN argument</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 History (string obitDid);

        /// <summary>
        /// Get Obit history by DID or USN
        /// </summary>
        /// <remarks>
        /// Shows the history of changes by given Obit with ObitDID or USN
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID or USN argument</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> HistoryWithHttpInfo (string obitDid);
        /// <summary>
        /// Save Obit
        /// </summary>
        /// <remarks>
        /// Returns Obit with updated checksum if data was changed.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <returns></returns>
        void Save (Obit obit = default(Obit));

        /// <summary>
        /// Save Obit
        /// </summary>
        /// <remarks>
        /// Returns Obit with updated checksum if data was changed.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveWithHttpInfo (Obit obit = default(Obit));
        /// <summary>
        /// Search obits by query
        /// </summary>
        /// <remarks>
        /// Implements a fulltext search for obits by \&quot;searchTerm\&quot;.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query argument that used for a fulltext search (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <returns>Obits</returns>
        Obits Search (string q = default(string), int? offset = default(int?));

        /// <summary>
        /// Search obits by query
        /// </summary>
        /// <remarks>
        /// Implements a fulltext search for obits by \&quot;searchTerm\&quot;.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query argument that used for a fulltext search (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <returns>ApiResponse of Obits</returns>
        ApiResponse<Obits> SearchWithHttpInfo (string q = default(string), int? offset = default(int?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Generates Obit checksum
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Checksum</returns>
        System.Threading.Tasks.Task<Checksum> ChecksumAsync (Obit obit = default(Obit), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generates Obit checksum
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Checksum)</returns>
        System.Threading.Tasks.Task<ApiResponse<Checksum>> ChecksumWithHttpInfoAsync (Obit obit = default(Obit), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate Obit ID
        /// </summary>
        /// <remarks>
        /// Returns the Obit ID for a given device_id, part_number and serial_number input.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestObitId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ObitId</returns>
        System.Threading.Tasks.Task<ObitId> GenerateIdAsync (RequestObitId requestObitId = default(RequestObitId), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Generate Obit ID
        /// </summary>
        /// <remarks>
        /// Returns the Obit ID for a given device_id, part_number and serial_number input.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestObitId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ObitId)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObitId>> GenerateIdWithHttpInfoAsync (RequestObitId requestObitId = default(RequestObitId), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Obit by DID or USN
        /// </summary>
        /// <remarks>
        /// Get a single Obit by given ObitDID or USN
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Obit</returns>
        System.Threading.Tasks.Task<Obit> GetAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Obit by DID or USN
        /// </summary>
        /// <remarks>
        /// Get a single Obit by given ObitDID or USN
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Obit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Obit>> GetWithHttpInfoAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Obit history by DID or USN
        /// </summary>
        /// <remarks>
        /// Shows the history of changes by given Obit with ObitDID or USN
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID or USN argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> HistoryAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Obit history by DID or USN
        /// </summary>
        /// <remarks>
        /// Shows the history of changes by given Obit with ObitDID or USN
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID or USN argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> HistoryWithHttpInfoAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Save Obit
        /// </summary>
        /// <remarks>
        /// Returns Obit with updated checksum if data was changed.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveAsync (Obit obit = default(Obit), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Save Obit
        /// </summary>
        /// <remarks>
        /// Returns Obit with updated checksum if data was changed.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveWithHttpInfoAsync (Obit obit = default(Obit), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search obits by query
        /// </summary>
        /// <remarks>
        /// Implements a fulltext search for obits by \&quot;searchTerm\&quot;.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query argument that used for a fulltext search (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Obits</returns>
        System.Threading.Tasks.Task<Obits> SearchAsync (string q = default(string), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search obits by query
        /// </summary>
        /// <remarks>
        /// Implements a fulltext search for obits by \&quot;searchTerm\&quot;.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query argument that used for a fulltext search (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Obits)</returns>
        System.Threading.Tasks.Task<ApiResponse<Obits>> SearchWithHttpInfoAsync (string q = default(string), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObitApi : IObitApi
    {
        private Obada.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObitApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObitApi(String basePath)
        {
            this.Configuration = new Obada.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Obada.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObitApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObitApi()
        {
            this.Configuration = Obada.Client.Client.Configuration.Default;

            ExceptionFactory = Obada.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObitApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObitApi(Obada.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Obada.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Obada.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Obada.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Obada.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Generates Obit checksum 
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <returns>Checksum</returns>
        public Checksum Checksum (Obit obit = default(Obit))
        {
             ApiResponse<Checksum> localVarResponse = ChecksumWithHttpInfo(obit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generates Obit checksum 
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <returns>ApiResponse of Checksum</returns>
        public ApiResponse<Checksum> ChecksumWithHttpInfo (Obit obit = default(Obit))
        {

            var localVarPath = "/obit/checksum";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obit != null && obit.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(obit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = obit; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Checksum", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Checksum>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Checksum) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Checksum)));
        }

        /// <summary>
        /// Generates Obit checksum 
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Checksum</returns>
        public async System.Threading.Tasks.Task<Checksum> ChecksumAsync (Obit obit = default(Obit), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Checksum> localVarResponse = await ChecksumWithHttpInfoAsync(obit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generates Obit checksum 
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Checksum)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Checksum>> ChecksumWithHttpInfoAsync (Obit obit = default(Obit), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/obit/checksum";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obit != null && obit.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(obit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = obit; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Checksum", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Checksum>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Checksum) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Checksum)));
        }

        /// <summary>
        /// Generate Obit ID Returns the Obit ID for a given device_id, part_number and serial_number input.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestObitId"> (optional)</param>
        /// <returns>ObitId</returns>
        public ObitId GenerateId (RequestObitId requestObitId = default(RequestObitId))
        {
             ApiResponse<ObitId> localVarResponse = GenerateIdWithHttpInfo(requestObitId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Obit ID Returns the Obit ID for a given device_id, part_number and serial_number input.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestObitId"> (optional)</param>
        /// <returns>ApiResponse of ObitId</returns>
        public ApiResponse<ObitId> GenerateIdWithHttpInfo (RequestObitId requestObitId = default(RequestObitId))
        {

            var localVarPath = "/obit/id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestObitId != null && requestObitId.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestObitId); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestObitId; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ObitId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ObitId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObitId)));
        }

        /// <summary>
        /// Generate Obit ID Returns the Obit ID for a given device_id, part_number and serial_number input.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestObitId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ObitId</returns>
        public async System.Threading.Tasks.Task<ObitId> GenerateIdAsync (RequestObitId requestObitId = default(RequestObitId), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ObitId> localVarResponse = await GenerateIdWithHttpInfoAsync(requestObitId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate Obit ID Returns the Obit ID for a given device_id, part_number and serial_number input.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestObitId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ObitId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ObitId>> GenerateIdWithHttpInfoAsync (RequestObitId requestObitId = default(RequestObitId), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/obit/id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestObitId != null && requestObitId.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestObitId); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestObitId; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ObitId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ObitId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObitId)));
        }

        /// <summary>
        /// Get Obit by DID or USN Get a single Obit by given ObitDID or USN
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <returns>Obit</returns>
        public Obit Get (string obitDid)
        {
             ApiResponse<Obit> localVarResponse = GetWithHttpInfo(obitDid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Obit by DID or USN Get a single Obit by given ObitDID or USN
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <returns>ApiResponse of Obit</returns>
        public ApiResponse<Obit> GetWithHttpInfo (string obitDid)
        {
            // verify the required parameter 'obitDid' is set
            if (obitDid == null)
                throw new ApiException(400, "Missing required parameter 'obitDid' when calling ObitApi->Get");

            var localVarPath = "/obits/{obit_did}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null) localVarPathParams.Add("obit_did", this.Configuration.ApiClient.ParameterToString(obitDid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Obit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Obit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Obit)));
        }

        /// <summary>
        /// Get Obit by DID or USN Get a single Obit by given ObitDID or USN
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Obit</returns>
        public async System.Threading.Tasks.Task<Obit> GetAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Obit> localVarResponse = await GetWithHttpInfoAsync(obitDid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Obit by DID or USN Get a single Obit by given ObitDID or USN
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Obit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Obit>> GetWithHttpInfoAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'obitDid' is set
            if (obitDid == null)
                throw new ApiException(400, "Missing required parameter 'obitDid' when calling ObitApi->Get");

            var localVarPath = "/obits/{obit_did}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null) localVarPathParams.Add("obit_did", this.Configuration.ApiClient.ParameterToString(obitDid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Obit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Obit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Obit)));
        }

        /// <summary>
        /// Get Obit history by DID or USN Shows the history of changes by given Obit with ObitDID or USN
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID or USN argument</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 History (string obitDid)
        {
             ApiResponse<InlineResponse200> localVarResponse = HistoryWithHttpInfo(obitDid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Obit history by DID or USN Shows the history of changes by given Obit with ObitDID or USN
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID or USN argument</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> HistoryWithHttpInfo (string obitDid)
        {
            // verify the required parameter 'obitDid' is set
            if (obitDid == null)
                throw new ApiException(400, "Missing required parameter 'obitDid' when calling ObitApi->History");

            var localVarPath = "/obits/{obit_did}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null) localVarPathParams.Add("obit_did", this.Configuration.ApiClient.ParameterToString(obitDid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("History", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Get Obit history by DID or USN Shows the history of changes by given Obit with ObitDID or USN
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID or USN argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> HistoryAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse200> localVarResponse = await HistoryWithHttpInfoAsync(obitDid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Obit history by DID or USN Shows the history of changes by given Obit with ObitDID or USN
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID or USN argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> HistoryWithHttpInfoAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'obitDid' is set
            if (obitDid == null)
                throw new ApiException(400, "Missing required parameter 'obitDid' when calling ObitApi->History");

            var localVarPath = "/obits/{obit_did}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null) localVarPathParams.Add("obit_did", this.Configuration.ApiClient.ParameterToString(obitDid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("History", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Save Obit Returns Obit with updated checksum if data was changed.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <returns></returns>
        public void Save (Obit obit = default(Obit))
        {
             SaveWithHttpInfo(obit);
        }

        /// <summary>
        /// Save Obit Returns Obit with updated checksum if data was changed.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SaveWithHttpInfo (Obit obit = default(Obit))
        {

            var localVarPath = "/obits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obit != null && obit.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(obit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = obit; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Save", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Save Obit Returns Obit with updated checksum if data was changed.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveAsync (Obit obit = default(Obit), CancellationToken cancellationToken = default(CancellationToken))
        {
             await SaveWithHttpInfoAsync(obit, cancellationToken);

        }

        /// <summary>
        /// Save Obit Returns Obit with updated checksum if data was changed.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SaveWithHttpInfoAsync (Obit obit = default(Obit), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/obits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obit != null && obit.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(obit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = obit; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Save", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Search obits by query Implements a fulltext search for obits by \&quot;searchTerm\&quot;.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query argument that used for a fulltext search (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <returns>Obits</returns>
        public Obits Search (string q = default(string), int? offset = default(int?))
        {
             ApiResponse<Obits> localVarResponse = SearchWithHttpInfo(q, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search obits by query Implements a fulltext search for obits by \&quot;searchTerm\&quot;.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query argument that used for a fulltext search (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <returns>ApiResponse of Obits</returns>
        public ApiResponse<Obits> SearchWithHttpInfo (string q = default(string), int? offset = default(int?))
        {

            var localVarPath = "/obits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Obits>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Obits) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Obits)));
        }

        /// <summary>
        /// Search obits by query Implements a fulltext search for obits by \&quot;searchTerm\&quot;.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query argument that used for a fulltext search (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Obits</returns>
        public async System.Threading.Tasks.Task<Obits> SearchAsync (string q = default(string), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Obits> localVarResponse = await SearchWithHttpInfoAsync(q, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search obits by query Implements a fulltext search for obits by \&quot;searchTerm\&quot;.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query argument that used for a fulltext search (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Obits)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Obits>> SearchWithHttpInfoAsync (string q = default(string), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/obits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Obits>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Obits) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Obits)));
        }

    }
}
