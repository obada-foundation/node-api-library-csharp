/*
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Obada.Client.Client;
using Obada.Client.Model;

namespace Obada.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObitApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new obit.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 CreateObit (Obit obit = default(Obit));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new obit.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> CreateObitWithHttpInfo (Obit obit = default(Obit));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes Obit status to DISABLED_BY_OWNER
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <returns></returns>
        void RemoveObit (string obitDid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes Obit status to DISABLED_BY_OWNER
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveObitWithHttpInfo (string obitDid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search obits by given filters.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumberHash">Query argument that filters by serial number hash (optional)</param>
        /// <param name="obitStatus">Query argument that filters by obit status (optional)</param>
        /// <param name="manufacturer">Query argument that filters by manufacturer (optional)</param>
        /// <param name="partNumber">Query argument that filters by part number (optional)</param>
        /// <param name="usn">Universal serial number (optional)</param>
        /// <param name="ownerDid">OBADA owner DID (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <param name="limit">Maximum number of records to return. (optional, default to 0)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 SearchObits (string serialNumberHash = default(string), string obitStatus = default(string), string manufacturer = default(string), string partNumber = default(string), string usn = default(string), string ownerDid = default(string), int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search obits by given filters.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumberHash">Query argument that filters by serial number hash (optional)</param>
        /// <param name="obitStatus">Query argument that filters by obit status (optional)</param>
        /// <param name="manufacturer">Query argument that filters by manufacturer (optional)</param>
        /// <param name="partNumber">Query argument that filters by part number (optional)</param>
        /// <param name="usn">Universal serial number (optional)</param>
        /// <param name="ownerDid">OBADA owner DID (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <param name="limit">Maximum number of records to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> SearchObitsWithHttpInfo (string serialNumberHash = default(string), string obitStatus = default(string), string manufacturer = default(string), string partNumber = default(string), string usn = default(string), string ownerDid = default(string), int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Shows the information about single Obit by given ObitDID
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <returns>Obit</returns>
        Obit ShowObit (string obitDid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Shows the information about single Obit by given ObitDID
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <returns>ApiResponse of Obit</returns>
        ApiResponse<Obit> ShowObitWithHttpInfo (string obitDid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Shows the history of changes by given Obit with ObitDID
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 ShowObitHistory (string obitDid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Shows the history of changes by given Obit with ObitDID
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> ShowObitHistoryWithHttpInfo (string obitDid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates Obit by given ObitDID with payload
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="obit"> (optional)</param>
        /// <returns></returns>
        void UpdateObit (string obitDid, Obit obit = default(Obit));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates Obit by given ObitDID with payload
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="obit"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateObitWithHttpInfo (string obitDid, Obit obit = default(Obit));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new obit.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> CreateObitAsync (Obit obit = default(Obit), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new obit.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> CreateObitWithHttpInfoAsync (Obit obit = default(Obit), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes Obit status to DISABLED_BY_OWNER
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveObitAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Changes Obit status to DISABLED_BY_OWNER
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveObitWithHttpInfoAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search obits by given filters.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumberHash">Query argument that filters by serial number hash (optional)</param>
        /// <param name="obitStatus">Query argument that filters by obit status (optional)</param>
        /// <param name="manufacturer">Query argument that filters by manufacturer (optional)</param>
        /// <param name="partNumber">Query argument that filters by part number (optional)</param>
        /// <param name="usn">Universal serial number (optional)</param>
        /// <param name="ownerDid">OBADA owner DID (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <param name="limit">Maximum number of records to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> SearchObitsAsync (string serialNumberHash = default(string), string obitStatus = default(string), string manufacturer = default(string), string partNumber = default(string), string usn = default(string), string ownerDid = default(string), int? offset = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search obits by given filters.
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumberHash">Query argument that filters by serial number hash (optional)</param>
        /// <param name="obitStatus">Query argument that filters by obit status (optional)</param>
        /// <param name="manufacturer">Query argument that filters by manufacturer (optional)</param>
        /// <param name="partNumber">Query argument that filters by part number (optional)</param>
        /// <param name="usn">Universal serial number (optional)</param>
        /// <param name="ownerDid">OBADA owner DID (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <param name="limit">Maximum number of records to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> SearchObitsWithHttpInfoAsync (string serialNumberHash = default(string), string obitStatus = default(string), string manufacturer = default(string), string partNumber = default(string), string usn = default(string), string ownerDid = default(string), int? offset = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Shows the information about single Obit by given ObitDID
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Obit</returns>
        System.Threading.Tasks.Task<Obit> ShowObitAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Shows the information about single Obit by given ObitDID
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Obit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Obit>> ShowObitWithHttpInfoAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Shows the history of changes by given Obit with ObitDID
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> ShowObitHistoryAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Shows the history of changes by given Obit with ObitDID
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ShowObitHistoryWithHttpInfoAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates Obit by given ObitDID with payload
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="obit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateObitAsync (string obitDid, Obit obit = default(Obit), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates Obit by given ObitDID with payload
        /// </remarks>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="obit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateObitWithHttpInfoAsync (string obitDid, Obit obit = default(Obit), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObitApi : IObitApi
    {
        private Obada.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObitApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObitApi(String basePath)
        {
            this.Configuration = new Obada.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Obada.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObitApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObitApi()
        {
            this.Configuration = Obada.Client.Client.Configuration.Default;

            ExceptionFactory = Obada.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObitApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObitApi(Obada.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Obada.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Obada.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Obada.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Obada.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Creates a new obit.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 CreateObit (Obit obit = default(Obit))
        {
             ApiResponse<InlineResponse201> localVarResponse = CreateObitWithHttpInfo(obit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new obit.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse<InlineResponse201> CreateObitWithHttpInfo (Obit obit = default(Obit))
        {

            var localVarPath = "/obits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obit != null && obit.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(obit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = obit; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateObit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        ///  Creates a new obit.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201> CreateObitAsync (Obit obit = default(Obit), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse201> localVarResponse = await CreateObitWithHttpInfoAsync(obit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a new obit.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> CreateObitWithHttpInfoAsync (Obit obit = default(Obit), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/obits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obit != null && obit.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(obit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = obit; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateObit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        ///  Changes Obit status to DISABLED_BY_OWNER
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <returns></returns>
        public void RemoveObit (string obitDid)
        {
             RemoveObitWithHttpInfo(obitDid);
        }

        /// <summary>
        ///  Changes Obit status to DISABLED_BY_OWNER
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveObitWithHttpInfo (string obitDid)
        {
            // verify the required parameter 'obitDid' is set
            if (obitDid == null)
                throw new ApiException(400, "Missing required parameter 'obitDid' when calling ObitApi->RemoveObit");

            var localVarPath = "/obits/{obit_did}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null) localVarPathParams.Add("obit_did", this.Configuration.ApiClient.ParameterToString(obitDid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveObit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Changes Obit status to DISABLED_BY_OWNER
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveObitAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken))
        {
             await RemoveObitWithHttpInfoAsync(obitDid, cancellationToken);

        }

        /// <summary>
        ///  Changes Obit status to DISABLED_BY_OWNER
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveObitWithHttpInfoAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'obitDid' is set
            if (obitDid == null)
                throw new ApiException(400, "Missing required parameter 'obitDid' when calling ObitApi->RemoveObit");

            var localVarPath = "/obits/{obit_did}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null) localVarPathParams.Add("obit_did", this.Configuration.ApiClient.ParameterToString(obitDid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveObit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Search obits by given filters.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumberHash">Query argument that filters by serial number hash (optional)</param>
        /// <param name="obitStatus">Query argument that filters by obit status (optional)</param>
        /// <param name="manufacturer">Query argument that filters by manufacturer (optional)</param>
        /// <param name="partNumber">Query argument that filters by part number (optional)</param>
        /// <param name="usn">Universal serial number (optional)</param>
        /// <param name="ownerDid">OBADA owner DID (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <param name="limit">Maximum number of records to return. (optional, default to 0)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 SearchObits (string serialNumberHash = default(string), string obitStatus = default(string), string manufacturer = default(string), string partNumber = default(string), string usn = default(string), string ownerDid = default(string), int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<InlineResponse2005> localVarResponse = SearchObitsWithHttpInfo(serialNumberHash, obitStatus, manufacturer, partNumber, usn, ownerDid, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Search obits by given filters.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumberHash">Query argument that filters by serial number hash (optional)</param>
        /// <param name="obitStatus">Query argument that filters by obit status (optional)</param>
        /// <param name="manufacturer">Query argument that filters by manufacturer (optional)</param>
        /// <param name="partNumber">Query argument that filters by part number (optional)</param>
        /// <param name="usn">Universal serial number (optional)</param>
        /// <param name="ownerDid">OBADA owner DID (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <param name="limit">Maximum number of records to return. (optional, default to 0)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse<InlineResponse2005> SearchObitsWithHttpInfo (string serialNumberHash = default(string), string obitStatus = default(string), string manufacturer = default(string), string partNumber = default(string), string usn = default(string), string ownerDid = default(string), int? offset = default(int?), int? limit = default(int?))
        {

            var localVarPath = "/obits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serialNumberHash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serial_number_hash", serialNumberHash)); // query parameter
            if (obitStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "obit_status", obitStatus)); // query parameter
            if (manufacturer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manufacturer", manufacturer)); // query parameter
            if (partNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "part_number", partNumber)); // query parameter
            if (usn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usn", usn)); // query parameter
            if (ownerDid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "owner_did", ownerDid)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchObits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        ///  Search obits by given filters.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumberHash">Query argument that filters by serial number hash (optional)</param>
        /// <param name="obitStatus">Query argument that filters by obit status (optional)</param>
        /// <param name="manufacturer">Query argument that filters by manufacturer (optional)</param>
        /// <param name="partNumber">Query argument that filters by part number (optional)</param>
        /// <param name="usn">Universal serial number (optional)</param>
        /// <param name="ownerDid">OBADA owner DID (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <param name="limit">Maximum number of records to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> SearchObitsAsync (string serialNumberHash = default(string), string obitStatus = default(string), string manufacturer = default(string), string partNumber = default(string), string usn = default(string), string ownerDid = default(string), int? offset = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse2005> localVarResponse = await SearchObitsWithHttpInfoAsync(serialNumberHash, obitStatus, manufacturer, partNumber, usn, ownerDid, offset, limit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Search obits by given filters.
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNumberHash">Query argument that filters by serial number hash (optional)</param>
        /// <param name="obitStatus">Query argument that filters by obit status (optional)</param>
        /// <param name="manufacturer">Query argument that filters by manufacturer (optional)</param>
        /// <param name="partNumber">Query argument that filters by part number (optional)</param>
        /// <param name="usn">Universal serial number (optional)</param>
        /// <param name="ownerDid">OBADA owner DID (optional)</param>
        /// <param name="offset">Number of records to skip for pagination. (optional, default to 0)</param>
        /// <param name="limit">Maximum number of records to return. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> SearchObitsWithHttpInfoAsync (string serialNumberHash = default(string), string obitStatus = default(string), string manufacturer = default(string), string partNumber = default(string), string usn = default(string), string ownerDid = default(string), int? offset = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/obits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serialNumberHash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serial_number_hash", serialNumberHash)); // query parameter
            if (obitStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "obit_status", obitStatus)); // query parameter
            if (manufacturer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "manufacturer", manufacturer)); // query parameter
            if (partNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "part_number", partNumber)); // query parameter
            if (usn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usn", usn)); // query parameter
            if (ownerDid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "owner_did", ownerDid)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchObits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        ///  Shows the information about single Obit by given ObitDID
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <returns>Obit</returns>
        public Obit ShowObit (string obitDid)
        {
             ApiResponse<Obit> localVarResponse = ShowObitWithHttpInfo(obitDid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Shows the information about single Obit by given ObitDID
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <returns>ApiResponse of Obit</returns>
        public ApiResponse<Obit> ShowObitWithHttpInfo (string obitDid)
        {
            // verify the required parameter 'obitDid' is set
            if (obitDid == null)
                throw new ApiException(400, "Missing required parameter 'obitDid' when calling ObitApi->ShowObit");

            var localVarPath = "/obits/{obit_did}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null) localVarPathParams.Add("obit_did", this.Configuration.ApiClient.ParameterToString(obitDid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShowObit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Obit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Obit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Obit)));
        }

        /// <summary>
        ///  Shows the information about single Obit by given ObitDID
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Obit</returns>
        public async System.Threading.Tasks.Task<Obit> ShowObitAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Obit> localVarResponse = await ShowObitWithHttpInfoAsync(obitDid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Shows the information about single Obit by given ObitDID
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Obit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Obit>> ShowObitWithHttpInfoAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'obitDid' is set
            if (obitDid == null)
                throw new ApiException(400, "Missing required parameter 'obitDid' when calling ObitApi->ShowObit");

            var localVarPath = "/obits/{obit_did}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null) localVarPathParams.Add("obit_did", this.Configuration.ApiClient.ParameterToString(obitDid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShowObit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Obit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Obit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Obit)));
        }

        /// <summary>
        ///  Shows the history of changes by given Obit with ObitDID
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 ShowObitHistory (string obitDid)
        {
             ApiResponse<InlineResponse2006> localVarResponse = ShowObitHistoryWithHttpInfo(obitDid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Shows the history of changes by given Obit with ObitDID
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse<InlineResponse2006> ShowObitHistoryWithHttpInfo (string obitDid)
        {
            // verify the required parameter 'obitDid' is set
            if (obitDid == null)
                throw new ApiException(400, "Missing required parameter 'obitDid' when calling ObitApi->ShowObitHistory");

            var localVarPath = "/obits/{obit_did}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null) localVarPathParams.Add("obit_did", this.Configuration.ApiClient.ParameterToString(obitDid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShowObitHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Shows the history of changes by given Obit with ObitDID
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> ShowObitHistoryAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse2006> localVarResponse = await ShowObitHistoryWithHttpInfoAsync(obitDid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Shows the history of changes by given Obit with ObitDID
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ShowObitHistoryWithHttpInfoAsync (string obitDid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'obitDid' is set
            if (obitDid == null)
                throw new ApiException(400, "Missing required parameter 'obitDid' when calling ObitApi->ShowObitHistory");

            var localVarPath = "/obits/{obit_did}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null) localVarPathParams.Add("obit_did", this.Configuration.ApiClient.ParameterToString(obitDid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShowObitHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Updates Obit by given ObitDID with payload
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="obit"> (optional)</param>
        /// <returns></returns>
        public void UpdateObit (string obitDid, Obit obit = default(Obit))
        {
             UpdateObitWithHttpInfo(obitDid, obit);
        }

        /// <summary>
        ///  Updates Obit by given ObitDID with payload
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="obit"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateObitWithHttpInfo (string obitDid, Obit obit = default(Obit))
        {
            // verify the required parameter 'obitDid' is set
            if (obitDid == null)
                throw new ApiException(400, "Missing required parameter 'obitDid' when calling ObitApi->UpdateObit");

            var localVarPath = "/obits/{obit_did}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null) localVarPathParams.Add("obit_did", this.Configuration.ApiClient.ParameterToString(obitDid)); // path parameter
            if (obit != null && obit.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(obit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = obit; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateObit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Updates Obit by given ObitDID with payload
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="obit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateObitAsync (string obitDid, Obit obit = default(Obit), CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateObitWithHttpInfoAsync(obitDid, obit, cancellationToken);

        }

        /// <summary>
        ///  Updates Obit by given ObitDID with payload
        /// </summary>
        /// <exception cref="Obada.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="obitDid">The given ObitDID argument</param>
        /// <param name="obit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateObitWithHttpInfoAsync (string obitDid, Obit obit = default(Obit), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'obitDid' is set
            if (obitDid == null)
                throw new ApiException(400, "Missing required parameter 'obitDid' when calling ObitApi->UpdateObit");

            var localVarPath = "/obits/{obit_did}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (obitDid != null) localVarPathParams.Add("obit_did", this.Configuration.ApiClient.ParameterToString(obitDid)); // path parameter
            if (obit != null && obit.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(obit); // http body (model) parameter
            }
            else
            {
                localVarPostBody = obit; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateObit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
